# Generated by Django 3.0.2 on 2020-02-01 00:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch_name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_name', models.CharField(max_length=100)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=5)),
                ('min_participants', models.IntegerField()),
                ('max_participants', models.IntegerField()),
                ('travel', models.BooleanField()),
                ('handouts', models.BooleanField()),
                ('student_reqs', models.TextField()),
                ('loc_reqs', models.TextField()),
                ('description', models.TextField()),
                ('pre_reqs', models.TextField()),
                ('approved', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=100)),
                ('hours', models.DecimalField(decimal_places=1, max_digits=3)),
                ('credits', models.IntegerField()),
                ('approved', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Degree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('degree_name', models.CharField(max_length=100)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DegreeType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=100)),
                ('core_credits', models.IntegerField()),
                ('extra_credits', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_name', models.CharField(max_length=200)),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('tutr_surcharge', models.DecimalField(decimal_places=2, max_digits=5)),
                ('location_name', models.CharField(max_length=100)),
                ('apt_num', models.CharField(max_length=10)),
                ('street', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('postal_cd', models.CharField(max_length=7, validators=[django.core.validators.RegexValidator(message='You have entered an invalid Postal Code. Please enter a valid Canadian or US Postal Code', regex='^\\d{5}-\\d{4}|\\d{5}|[A-Z]\\d[A-Z] \\d[A-Z]\\d$')])),
                ('closed', models.BooleanField()),
                ('approved', models.BooleanField()),
                ('branch_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Branch')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sca_name', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('joined_date', models.DateField(blank=True, null=True, verbose_name='Date Joined')),
                ('active', models.BooleanField()),
                ('position', models.CharField(blank=True, max_length=100)),
                ('teacher', models.BooleanField()),
                ('minor', models.BooleanField(blank=True)),
                ('branch_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Branch')),
                ('guardian', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Person')),
            ],
        ),
        migrations.CreateModel(
            name='Principality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('principality_name', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('person_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Person')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Class')),
                ('event_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('major_name', models.CharField(max_length=100)),
                ('degree_cd', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Degree')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalEvent',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('event_name', models.CharField(max_length=200)),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('tutr_surcharge', models.DecimalField(decimal_places=2, max_digits=5)),
                ('location_name', models.CharField(max_length=100)),
                ('apt_num', models.CharField(max_length=10)),
                ('street', models.CharField(max_length=200)),
                ('city', models.CharField(max_length=100)),
                ('postal_cd', models.CharField(max_length=7, validators=[django.core.validators.RegexValidator(message='You have entered an invalid Postal Code. Please enter a valid Canadian or US Postal Code', regex='^\\d{5}-\\d{4}|\\d{5}|[A-Z]\\d[A-Z] \\d[A-Z]\\d$')])),
                ('closed', models.BooleanField()),
                ('approved', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('branch_id', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='TUTRReg.Branch')),
                ('dean', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='TUTRReg.Person')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical event',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCourse',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('course_name', models.CharField(max_length=100)),
                ('hours', models.DecimalField(decimal_places=1, max_digits=3)),
                ('credits', models.IntegerField()),
                ('approved', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('major', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='TUTRReg.Major')),
            ],
            options={
                'verbose_name': 'historical course',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalClass',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('class_name', models.CharField(max_length=100)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=5)),
                ('min_participants', models.IntegerField()),
                ('max_participants', models.IntegerField()),
                ('travel', models.BooleanField()),
                ('handouts', models.BooleanField()),
                ('student_reqs', models.TextField()),
                ('loc_reqs', models.TextField()),
                ('description', models.TextField()),
                ('pre_reqs', models.TextField()),
                ('approved', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('course_id', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='TUTRReg.Course')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='TUTRReg.Person')),
            ],
            options={
                'verbose_name': 'historical class',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='event',
            name='dean',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Person'),
        ),
        migrations.AddField(
            model_name='degree',
            name='degree_cd',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.DegreeType'),
        ),
        migrations.AddField(
            model_name='course',
            name='major',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Major'),
        ),
        migrations.AddField(
            model_name='class',
            name='course_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Course'),
        ),
        migrations.AddField(
            model_name='class',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Person'),
        ),
        migrations.AddField(
            model_name='branch',
            name='principality',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Principality'),
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attended', models.BooleanField(blank=True, null=True)),
                ('passed', models.BooleanField(blank=True, null=True)),
                ('person_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Person')),
                ('session_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='TUTRReg.Session')),
            ],
        ),
    ]
